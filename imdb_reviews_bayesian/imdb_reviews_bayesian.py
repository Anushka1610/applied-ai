# -*- coding: utf-8 -*-
"""hw2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Hjv5Ui5GJHRQBC0jM1wYz1Ly71ELV2pL
"""

from keras.datasets import imdb
(x_train, y_train), (x_test, y_test) = imdb.load_data(path="imdb.npz",
                                                      num_words=None,
                                                      skip_top=0,
                                                      maxlen=None,
                                                      seed=113,
                                                      start_char=1,
                                                      oov_char=2,
                                                      index_from=3)
print(y_test)

PosRev=[]
NegRev=[]
PosRev=x_train[y_train==1]
NegRev=x_train[y_train==0]

print(PosRev)
print(NegRev)

import collections
import numpy as np
cntPos = collections.Counter()
for i in range(len(PosRev)):
  for word in PosRev[i]:
    cntPos[word] += 1
    
#print(cntPos)

cntNeg = collections.Counter()
for i in range(len(NegRev)):
  for word in (NegRev[i]):
    cntNeg[word] += 1

#print(cntNeg)


posCountTotal = sum(cntPos.values())
print(posCountTotal)
negCountTotal = sum(cntNeg.values())
print(negCountTotal)

posWordProbs = [val / posCountTotal for val in cntPos.values()]
negWordProbs = [val / negCountTotal for val in cntNeg.values()]

print(posWordProbs)
print(negWordProbs)

# print(ReviewKeys)
pos_voc = len(cntPos)
neg_voc = len(cntNeg)

Voc=88586

review=[]

count = 0
accuracy = 0
for rvw in x_test:
  LoglikelihoodPos=0
  LoglikelihoodNeg=0
  for word in rvw:
    LoglikelihoodPos=LoglikelihoodPos+ np.log10(((cntPos[word])+1)/(posCountTotal+(pos_voc)))
    LoglikelihoodNeg = LoglikelihoodNeg+np.log10(((cntNeg[word])+1)/(negCountTotal+(neg_voc)))
  if(LoglikelihoodPos>LoglikelihoodNeg):
    review.append(1)
  else:
    review.append(0)
    
  if(review[count]==y_test[count]): 
    accuracy = accuracy+1
  
  count = count+1
misclassification=1-accuracy/len(x_test)

print(LoglikelihoodPos)
print(LoglikelihoodNeg)
print(accuracy/(len(x_test)))
print(misclassification)

